{"version":3,"sources":["connectors.js","App.js","serviceWorker.js","index.js"],"names":["InjectedConnector","Connectors","NetworkOnlyConnector","MetaMask","supportedNetworks","connectors","Infura","providerURL","cpkFactoryAbi","networks","1","masterCopyAddress","proxyFactoryAddress","multiSendAddress","fallbackHandlerAddress","4","5","42","computeCPKAddress","provider","address","networkId","a","Error","create2Salt","utils","keccak256","defaultAbiCoder","encode","proxyFactory","ethers","Contract","proxyCreationCode","solidityKeccak256","slice","getAddress","Main","useState","setAddress","cpkAddress","setCpkAddress","context","useWeb3Context","React","useEffect","library","setFirstValidConnector","compute","placeholder","value","onChange","e","currentTarget","onClick","App","className","libraryName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0ZACQA,G,OAA4CC,aAA5CD,mBAAmBE,EAAyBD,aAAzBC,qBAErBC,EAAW,IAAIH,EAAkB,CAAEI,kBAAmB,CAAC,EAAG,KAMnDC,EAAa,CAAEC,OAJb,IAAIJ,EAAqB,CACtCK,YAAa,kEAGqBJ,YCH9BK,EAAgB,CAAE,mEAElBC,EAAW,CACfC,EAAG,CACDC,kBAAmB,6CACnBC,oBAAqB,6CACrBC,iBAAkB,6CAClBC,uBAAwB,8CAG1BC,EAAG,CACDJ,kBAAmB,6CACnBC,oBAAqB,6CACrBC,iBAAkB,6CAClBC,uBAAwB,8CAE1BE,EAAG,CACDL,kBAAmB,6CACnBC,oBAAqB,6CACrBC,iBAAkB,6CAClBC,uBAAwB,8CAG1BG,GAAI,CACFN,kBAAmB,6CACnBC,oBAAqB,6CACrBC,iBAAkB,6CAClBC,uBAAwB,+CAItBI,EAAiB,uCAAG,WAAOC,EAAUC,EAASC,GAA1B,qBAAAC,EAAA,yDACnBb,EAASY,GADU,sBAEhB,IAAIE,MAAM,uBAFM,aAMtB,qEACIC,EAAcC,QAAMC,UACxBD,QAAME,gBAAgBC,OAAO,CAAC,UAAW,WAAY,CAACR,EAFtD,wEAIIR,EAAsBH,EAASY,GAAWT,oBAC1CiB,EAAe,IAAIC,SAAOC,SAC9BnB,EACAJ,EACAW,GAGIR,EAAoBF,EAASY,GAAWV,kBAjBtB,KAkBjBc,QAlBiB,KAmBtBA,QAnBsB,KAqBlB,CAAC,QAAS,UAAW,UAAW,WArBd,KAwBhBI,EAAaT,QAxBG,KAyBhBI,EAzBgB,KA0BhBC,QA1BgB,KA2Bd,CAAC,QAAS,SA3BI,UA6BNI,EAAaG,oBA7BP,gCA8BZP,QAAME,gBAAgBC,OACpB,CAAC,WACD,CAACjB,IAhCS,4BA0BVsB,kBA1BU,4BAuBhB,OAvBgB,4BAoBnBA,kBApBmB,sBAsCnBC,OAAO,IAtCY,uBAkBXC,WAlBW,8DAAH,0DA0CjBC,EAAO,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACVjB,EADU,KACDkB,EADC,OAEmBD,mBAAS,IAF5B,mBAEVE,EAFU,KAEEC,EAFF,KAIXC,EAAUC,2BAQhB,GANAC,IAAMC,WAAU,WACTH,EAAQI,SACXJ,EAAQK,uBAAuB,CAAC,WAAY,aAE7C,CAACL,KAECA,EAAQI,QAAS,OAAO,KAE7B,IAAME,EAAO,uCAAG,sBAAAzB,EAAA,kEACdkB,EADc,SACMtB,EAAkBuB,EAAQI,QAASzB,EAASqB,EAAQpB,WAD1D,6EAAH,qDAIb,OAAO,oCACL,2BAAO2B,YAAY,UAAUC,MAAO7B,EAAS8B,SAAU,SAAAC,GAAC,OAAIb,EAAWa,EAAEC,cAAcH,UACvF,4BAAQI,QAASN,GAAjB,uBACA,6BAAOR,KAiBIe,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACElD,WAAYA,EACZmD,YAAa,aAEb,kBAAC,EAAD,SCnGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b846a7b.chunk.js","sourcesContent":["import { Connectors } from 'web3-react'\nconst { InjectedConnector, NetworkOnlyConnector } = Connectors\n\nconst MetaMask = new InjectedConnector({ supportedNetworks: [1, 4] })\n\nconst Infura = new NetworkOnlyConnector({\n  providerURL: 'https://rinkeby.infura.io/v3/76fb6c10f1584483a45a0a28e91b07ad'\n})\n\nexport const connectors = { Infura, MetaMask }\n","import React, { useState } from 'react';\nimport { ethers, utils } from 'ethers'\nimport Web3Provider, { useWeb3Context } from 'web3-react'\nimport './App.css';\nimport { connectors } from './connectors'\n\nconst cpkFactoryAbi = [ 'function proxyCreationCode() public pure returns (bytes memory)', ]\n\nconst networks = {\n  1: {\n    masterCopyAddress: '0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F',\n    proxyFactoryAddress: '0x0fB4340432e56c014fa96286de17222822a9281b',\n    multiSendAddress: '0xB522a9f781924eD250A11C54105E51840B138AdD',\n    fallbackHandlerAddress: '0x40A930851BD2e590Bd5A5C981b436de25742E980',\n  },\n  // rinkeby\n  4: {\n    masterCopyAddress: '0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F',\n    proxyFactoryAddress: '0x336c19296d3989e9e0c2561ef21c964068657c38',\n    multiSendAddress: '0xB522a9f781924eD250A11C54105E51840B138AdD',\n    fallbackHandlerAddress: '0x40A930851BD2e590Bd5A5C981b436de25742E980',\n  },\n  5: {\n    masterCopyAddress: '0xaE32496491b53841efb51829d6f886387708F99B',\n    proxyFactoryAddress: '0xfC7577774887aAE7bAcdf0Fc8ce041DA0b3200f7',\n    multiSendAddress: '0xB522a9f781924eD250A11C54105E51840B138AdD',\n    fallbackHandlerAddress: '0x40A930851BD2e590Bd5A5C981b436de25742E980',\n  },\n  // kovan\n  42: {\n    masterCopyAddress: '0xaE32496491b53841efb51829d6f886387708F99B',\n    proxyFactoryAddress: '0xfC7577774887aAE7bAcdf0Fc8ce041DA0b3200f7',\n    multiSendAddress: '0xB522a9f781924eD250A11C54105E51840B138AdD',\n    fallbackHandlerAddress: '0x40A930851BD2e590Bd5A5C981b436de25742E980',\n  },\n}\n\nconst computeCPKAddress = async (provider, address, networkId) => {\n  if (!networks[networkId]) {\n    throw new Error('unsupported network')\n  }\n\n  const predeterminedSaltNonce =\n    '0xcfe33a586323e7325be6aa6ecd8b4600d232a9037e83c8ece69413b777dabe65'\n  const create2Salt = utils.keccak256(\n    utils.defaultAbiCoder.encode(['address', 'uint256'], [address, predeterminedSaltNonce]),\n  )\n  const proxyFactoryAddress = networks[networkId].proxyFactoryAddress\n  const proxyFactory = new ethers.Contract(\n    proxyFactoryAddress,\n    cpkFactoryAbi,\n    provider,\n  )\n\n  const masterCopyAddress = networks[networkId].masterCopyAddress\n  return utils.getAddress(\n    utils\n      .solidityKeccak256(\n        ['bytes', 'address', 'bytes32', 'bytes32'],\n        [\n          '0xff',\n          proxyFactory.address,\n          create2Salt,\n          utils.solidityKeccak256(\n            ['bytes', 'bytes'],\n            [\n              await proxyFactory.proxyCreationCode(),\n              utils.defaultAbiCoder.encode(\n                ['address'],\n                [masterCopyAddress],\n              ),\n            ],\n          ),\n        ],\n      )\n      .slice(-40),\n  )\n}\n\nconst Main = () => {\n  const [address, setAddress] = useState('')\n  const [cpkAddress, setCpkAddress] = useState('')\n\n  const context = useWeb3Context()\n\n  React.useEffect(() => {\n    if (!context.library) {\n      context.setFirstValidConnector(['MetaMask', 'Infura'])\n    }\n  }, [context])\n\n  if (!context.library) return null\n\n  const compute = async () => {\n    setCpkAddress(await computeCPKAddress(context.library, address, context.networkId))\n  }\n\n  return <>\n    <input placeholder='Address' value={address} onChange={e => setAddress(e.currentTarget.value)} />\n    <button onClick={compute}>Compute CPK address</button>\n    <div>{ cpkAddress }</div>\n  </>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Web3Provider\n        connectors={connectors}\n        libraryName={'ethers.js'}\n      >\n        <Main />\n      </Web3Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}